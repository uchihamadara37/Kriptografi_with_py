import binascii
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk
import tkinter as tk
import pyperclip

# panji
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
import os
import base64

from Crypto.Cipher import Blowfish
# from Crypto.Cipher import Blowfish
from Crypto.Util.Padding import pad, unpad


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"D:\python_Backend_contoh\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
def set_placeholder(entry, placeholder):
    entry.insert(0, placeholder)
    entry.config(fg='grey')
# Fungsi untuk menghapus placeholder saat mendapatkan fokus

class PlaceholderEntry(tk.Entry):
    def __init__(self, master=None, placeholder="", bg='#FFFFFF', fg='#000716'):
        super().__init__(master, bd=0, bg=bg, fg=fg, highlightthickness=0)

        self.placeholder = placeholder
        self.placeholder_color = 'grey'
        self.default_fg_color = self['fg']

        self.bind("<FocusIn>", self.foc_in)
        self.bind("<FocusOut>", self.foc_out)
        self.put_placeholder()

    def put_placeholder(self):
        self.insert(0, self.placeholder)
        self['fg'] = self.placeholder_color
    def foc_in(self, *args):
        if self['fg'] == self.placeholder_color:
            self.delete('0', 'end')
            self['fg'] = self.default_fg_color
    def foc_out(self, *args):
        if not self.get():
            self.put_placeholder()


class EntryNumber(tk.Entry):
    def __init__(self, master=None, placeholder="PLACEHOLDER", bg='#FFFFFF', fg='#000716'):
        super().__init__(master, bd=0, bg=bg, fg=fg, highlightthickness=0, validate="key", validatecommand=(master.register(validate_input), '%P'))

        self.placeholder = placeholder
        self.placeholder_color = 'grey'
        self.default_fg_color = self['fg']

        # self.bind("<FocusIn>", self.foc_in)
        # self.bind("<FocusOut>", self.foc_out)

        self.put_placeholder()

    def put_placeholder(self):
        self.insert(0, self.placeholder)
        self['fg'] = self.placeholder_color

    # def foc_in(self, *args):
    #     if self['fg'] == self.placeholder_color:
    #         self.delete('0', 'end')
    #         self['fg'] = self.default_fg_color

    # def foc_out(self, *args):
        # if not self.get():
            # self.put_placeholder()

window = Tk()

window.geometry("820x575")
window.configure(bg = "#FFFFFF")



canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 575,
    width = 820,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    127.0,
    287.0,
    image=image_image_1
)

canvas.create_text(
    34.0,
    487.0,
    anchor="nw",
    text="Rafiq Ikhwan    / 123220071\nAndrea Alfian   / 123220078\nPanji Arif           / 123220091\nDewangga M.   / 1232200",
    fill="#FFFFFF",
    font=("Roboto Regular", 12 * -1)
)

canvas.create_text(
    34.0,
    31.0,
    anchor="nw",
    text="Kriptografi",
    fill="#D89B47",
    font=("Roboto Bold", 28 * -1)
)

canvas.create_text(
    293.0, #293
    38.0,
    anchor="nw",
    text="Silahkan pilih salah satu type untuk mulai mencoba!",
    fill="#000000",
    font=("Roboto Regular", 13 * -1)
)

# canvas.create_window(
#     100,
#     120,
#     height=200,
#     width=200,
#     anchor="center",
#     tags="okelah kalau begitu window"
#
# )

canvas.create_rectangle(
    292.5,
    61.5,
    530.0,
    63.0,
    fill="#000000",
    outline="")
canvas.create_text(
    34.0,
    75.0,
    anchor="nw",
    text="Klasik dan Modern",
    fill="#FFFFFF",
    font=("Roboto Bold", 21 * -1)
)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))

button_modern1_orange = PhotoImage(
    file=relative_to_assets("Modern1Orange.png"))
button_modern1_biru = PhotoImage(
    file=relative_to_assets("Modern1Biru.png"))
button_klasik1_orange = PhotoImage(
    file=relative_to_assets("Klasik1Orange.png"))
button_klasik1_biru = PhotoImage(
    file=relative_to_assets("Klasik1Biru.png"))
button_modern2_orange = PhotoImage(
    file=relative_to_assets("Modern2Orange.png"))
button_modern2_biru = PhotoImage(
    file=relative_to_assets("Modern2Biru.png"))
button_klasik2_orange = PhotoImage(
    file=relative_to_assets("Klasik2Orange.png"))
button_klasik2_biru = PhotoImage(
    file=relative_to_assets("Klasik2Biru.png"))
button_super_orange = PhotoImage(
    file=relative_to_assets("SuperOrange.png"))
button_super_biru = PhotoImage(
    file=relative_to_assets("SuperBiru.png"))

textfield_medium = PhotoImage(
    file=relative_to_assets("TextBox.png")
)
btn_copy = PhotoImage(
    file=relative_to_assets("copy.png")
)
btn_atas = PhotoImage(
    file=relative_to_assets("atas.png")
)
btn_bawah = PhotoImage(
    file=relative_to_assets("abawah.png")
)


def validate_input(new_text):
    if not new_text:  # Jika input kosong, dianggap valid
        return True
    return new_text.isdigit()

# ================================================================================================
# mulai membuat frame navbar

class FrameWindow(tk.Frame):
    def __init__(self, master=None, height=200, width=200, bg="#FFFFFF", bd=0):
        super().__init__(master=master, height=height, bd=bd, width=width, bg=bg)

        self.config(
            highlightthickness=bd,
            highlightbackground="#333333",
            highlightcolor="#333333"
        )

# ===================================================================================================
# ====================== FRAME KLASIK 1 CAESAR CHIPER ===============================================
frame_klasik1 = FrameWindow(
    window,
    height=420,
    width=520,
    bd=0,
    bg="#FFFFFF"
)
frame_klasik1.place(
    x=286,
    y=130,
)
label = tk.Label(
    frame_klasik1,
    text="Kriptografi Klasik 1 : Caesar Chiper",
    font=("Roboto Bold", 16),
    fg="#121212",
    bg="white"
)
label.place(x=0, y=0, anchor="nw")

# ============================================== kunci 1
tk.Label(
    frame_klasik1,
    text="Masukan nilai kunci chipper",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=33)
tk.Label(
    frame_klasik1,
    image=entry_image_2,
    bg="white"
).place(x=0, y=56)
klasik1_kunci = EntryNumber(
    frame_klasik1,
    bg="#FFFFFF",
    fg="#000716",
    placeholder="Masukan kunci 1 (angka)"
)
klasik1_kunci.place(
    x=15.0,
    y=59.0,
    width=214.0,
    height=32.0
)
# ======================== plaintext
tk.Label(
    frame_klasik1,
    text="Masukan string plaintext",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=100)
tk.Label(
    frame_klasik1,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=125)
klasik1_plaintext = PlaceholderEntry(
    frame_klasik1,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716"
)
klasik1_plaintext.place(
    x=15.0,
    y=128.0,
    width=430.0,
    height=32.0
)
# ================================ chipper klasik1
tk.Label(
    frame_klasik1,
    text="Masukan string chipperText untuk mencari plainText",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=170)
tk.Label(
    frame_klasik1,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=195)
klasik1_chipper = PlaceholderEntry(
    frame_klasik1,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716",
)
klasik1_chipper.place(
    x=15.0,
    y=198.0,
    width=430.0,
    height=32.0
)
# ============= btn copy ============
Button(
    frame_klasik1,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(klasik1_plaintext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=135.0,
    width=20.0,
    height=20.0
)
Button(
    frame_klasik1,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(klasik1_chipper.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=205.0,
    width=20.0,
    height=20.0
)


def caesar_cipher(text, shift):
    """Fungsi untuk melakukan enkripsi Caesar Cipher

    Args:
      text: Teks yang akan dienkripsi
      shift: Jumlah pergeseran

    Returns:
      Teks yang sudah terenkripsi
    """

    alphabet    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    alphabetLow = 'abcdefghijklmnopqrstuvwxyz'
    numbers = '0123456789'
    shifted_alphabet = alphabet[shift%26:] + alphabet[:shift%26]
    shifted_alphabet_low = alphabetLow[shift%26:] + alphabetLow[:shift%26]
    shifted_number = numbers[shift%9:] + numbers[:shift%9]

    result = ''
    for char in text:
        if char in alphabet or char in alphabetLow:
            if char.isupper():
                index = alphabet.find(char)
                result += shifted_alphabet[index]
            else:
                index = alphabetLow.find(char)
                result += shifted_alphabet_low[index]
        elif char in numbers:
            index = numbers.find(char)
            result += shifted_number[index]
        else:
            result += char
    return result

klasik1_kunci.config(textvariable=tk.StringVar())
klasik1_plaintext.config(textvariable=tk.StringVar())
def klasik1_on_key_up(event):
    if not klasik1_kunci.get():
        # print("belum ada kunci")
        klasik1_chipper.delete(0, tk.END)
        klasik1_chipper.insert(0, klasik1_plaintext.get())
    else:
        nilai_string = klasik1_kunci.get()
        try:
            kunci = int(nilai_string)
            klasik1_chipper.delete(0, tk.END)
            klasik1_chipper.insert(0, caesar_cipher(klasik1_plaintext.get(), kunci))
        except ValueError:
            print("Input bukan angka yang valid!")
def klasik1_on_key_up2(event):
    if not klasik1_kunci.get():
        # print("belum ada kunci")
        klasik1_plaintext.delete(0, tk.END)
        klasik1_plaintext.insert(0, klasik1_chipper.get())
    else:
        nilai_string = klasik1_kunci.get()
        try:
            kunci = int(nilai_string)
            klasik1_plaintext.delete(0, tk.END)
            klasik1_plaintext.insert(0, caesar_cipher(klasik1_chipper.get(), -kunci))
        except ValueError:
            print("Input bukan angka yang valid!")


klasik1_plaintext.bind("<KeyRelease>", klasik1_on_key_up)
klasik1_kunci.bind("<KeyRelease>", klasik1_on_key_up)
klasik1_chipper.bind("<KeyRelease>", klasik1_on_key_up2)


# ============== btn atas bawah =============
def klasik1_atas():
    if not klasik1_kunci.get():
        klasik1_kunci.delete(0, tk.END)
        klasik1_kunci.insert(0, '0')
    else:
        kunci = int(klasik1_kunci.get())
        kunci += 1
        klasik1_kunci.delete(0, tk.END)
        klasik1_kunci.insert(0, str(kunci))
        klasik1_chipper.event_generate("<KeyRelease>")
def klasik1_bawah():
    if not klasik1_kunci.get():
        klasik1_kunci.delete(0, tk.END)
        klasik1_kunci.insert(0, '0')
    else:
        kunci = int(klasik1_kunci.get())
        kunci -= 1
        klasik1_kunci.delete(0, tk.END)
        klasik1_kunci.insert(0, str(kunci))
        klasik1_chipper.event_generate("<KeyRelease>")
Button(
    frame_klasik1,
    image=btn_atas,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        klasik1_atas()
    ],
    relief="flat",
    bg="white"
).place(
    x=259.0,
    y=55.0,
    width=20.0,
    height=20.0
)
Button(
    frame_klasik1,
    image=btn_bawah,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        klasik1_bawah()
    ],
    relief="flat",
    bg="white"
).place(
    x=259.0,
    y=73.0,
    width=20.0,
    height=20.0
)
# ==================================================================================================
# =========================== KLASIK 2 VIGENERE CHIPPER ============================================
frame_klasik2 = FrameWindow(
    window,
    height=420,
    width=520,
    bd=0,
    bg="#FFFFFF"
)
# frame_klasik2.place(
#     x=286,
#     y=130,
# )
label = tk.Label(
    frame_klasik2,
    text="Kriptografi Klasik 2 : Vigenere Chipper",
    font=("Roboto Bold", 16),
    fg="#121212",
    bg="white"
)
label.place(x=0, y=0, anchor="nw")

# ============================================== kunci 1
tk.Label(
    frame_klasik2,
    text="Masukan key vigenere ",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=33)
tk.Label(
    frame_klasik2,
    image=entry_image_2,
    bg="white"
).place(x=0, y=56)
klasik2_kunci = PlaceholderEntry(
    frame_klasik2,
    bg="#FFFFFF",
    fg="#000716",
    placeholder=""
)
klasik2_kunci.place(
    x=15.0,
    y=59.0,
    width=214.0,
    height=32.0
)
# ======================== plaintext
tk.Label(
    frame_klasik2,
    text="Masukan string plaintext",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=100)
tk.Label(
    frame_klasik2,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=125)
klasik2_plaintext = PlaceholderEntry(
    frame_klasik2,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716"
)
klasik2_plaintext.place(
    x=15.0,
    y=128.0,
    width=430.0,
    height=32.0
)
# ================================ chipper klasik1
tk.Label(
    frame_klasik2,
    text="Masukan string chipperText untuk mencari plainText",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=170)
tk.Label(
    frame_klasik2,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=195)
klasik2_chipper = PlaceholderEntry(
    frame_klasik2,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716",
)
klasik2_chipper.place(
    x=15.0,
    y=198.0,
    width=430.0,
    height=32.0
)
# ============= btn copy ============
Button(
    frame_klasik2,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(klasik2_plaintext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=135.0,
    width=20.0,
    height=20.0
)
Button(
    frame_klasik2,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(klasik2_chipper.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=205.0,
    width=20.0,
    height=20.0
)

def vigenere_encrypt(plaintext, key):
    # Mengubah semua teks ke huruf kecil untuk penyederhanaan
    plaintext = plaintext.lower()
    key = key.lower()

    # Menghapus spasi dari plaintext
    # plaintext = plaintext.replace(" ", "")

    encrypted_text = ""
    key_index = 0

    for char in plaintext:
        if char.isalpha():  # Hanya memproses huruf
            # Menggeser huruf dengan nilai kunci
            shift = ord(key[key_index]) - ord('a')  # Menentukan nilai geser berdasarkan kunci
            encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))  # Menggeser huruf
            encrypted_text += encrypted_char

            # Perbarui index kunci, jika sudah mencapai panjang kunci, ulangi kembali dari awal
            key_index = (key_index + 1) % len(key)
        else:
            encrypted_text += char  # Jika bukan huruf, tambahkan tanpa perubahan

    return encrypted_text

def vigenere_decrypt(ciphertext, key):
    # Mengubah semua teks ke huruf kecil untuk penyederhanaan
    ciphertext = ciphertext.lower()
    key = key.lower()

    decrypted_text = ""
    key_index = 0

    for char in ciphertext:
        if char.isalpha():  # Hanya memproses huruf
            # Menggeser huruf dengan nilai kunci (berlawanan arah)
            shift = ord(key[key_index]) - ord('a')  # Menentukan nilai geser berdasarkan kunci
            decrypted_char = chr((ord(char) - ord('a') - shift + 26) % 26 + ord('a'))  # Geser berlawanan arah
            decrypted_text += decrypted_char

            # Perbarui index kunci, jika sudah mencapai panjang kunci, ulangi kembali dari awal
            key_index = (key_index + 1) % len(key)
        else:
            decrypted_text += char  # Jika bukan huruf, tambahkan tanpa perubahan

    return decrypted_text

def klasik2_key_release(event):
    if not klasik2_kunci.get() == "":
        klasik2_chipper.delete(0, tk.END)
        klasik2_chipper.insert(0, vigenere_encrypt(klasik2_plaintext.get(), klasik2_kunci.get()))
    else:
        print("walah")

def klasik2_key_release2(event):
    if not klasik2_kunci.get() == "":
        klasik2_plaintext.delete(0, tk.END)
        klasik2_plaintext.insert(0, vigenere_decrypt(klasik2_chipper.get(), klasik2_kunci.get()))

klasik2_kunci.bind("<KeyRelease>", klasik2_key_release)
klasik2_plaintext.bind("<KeyRelease>", klasik2_key_release)
klasik2_chipper.bind("<KeyRelease>", klasik2_key_release2)

# ==================================================================================================
# =========================================== Modern 1 =============================================
frame_modern1 = FrameWindow(
    window,
    height=420,
    width=520,
    bd=0,
    bg="#FFFFFF"
)
# frame_modern1.place(
#     x=286,
#     y=130,
# )
label = tk.Label(
    frame_modern1,
    text="Kriptografi Modern 1 : AES (Advanced Encryption Standard)",
    font=("Roboto Bold", 12),
    fg="#121212",
    anchor="nw",
    bg="white"
)
label.place(x=0, y=0, anchor="nw")

# ============================================== kunci 1
tk.Label(
    frame_modern1,
    text="Masukan kunci dengan panjang 16, 24, atau 32 byte",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=33)
tk.Label(
    frame_modern1,
    image=textfield_medium,
    bg="white"
).place(x=0, y=56)
modern1_kunci = tk.Entry(
    frame_modern1,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0,
    # state="disabled"
)
modern1_kunci.place(
    x=15.0,
    y=59.0,
    width=430.0,
    height=32.0
)
# ================================ kunci vi ke2
tk.Label(
    frame_modern1,
    text="Initialization Vector (IV) 16 digit",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=100)
tk.Label(
    frame_modern1,
    image=textfield_medium,
    bg="white"
).place(x=0, y=125)
modern1_kunci2 = tk.Entry(
    frame_modern1,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0,
    # state="disabled"
)
modern1_kunci2.place(
    x=15.0,
    y=128.0,
    width=430.0,
    height=32.0
)
# ======================== plaintext
tk.Label(
    frame_modern1,
    text="Masukan string plaintext",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=167)
tk.Label(
    frame_modern1,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=192)
modern1_plaintext = PlaceholderEntry(
    frame_modern1,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716"
)
modern1_plaintext.place(
    x=15.0,
    y=195.0,
    width=430.0,
    height=32.0
)

# ================================ chipper klasik1
tk.Label(
    frame_modern1,
    text="Masukan string chipperText untuk mencari plainText",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=234)
tk.Label(
    frame_modern1,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=259)
modern1_chipper = PlaceholderEntry(
    frame_modern1,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716",
)
modern1_chipper.place(
    x=15.0,
    y=262.0,
    width=430.0,
    height=32.0
)
# ============= btn copy ============
Button(
    frame_modern1,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(modern1_plaintext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=201.0,
    width=20.0,
    height=20.0
)
Button(
    frame_modern1,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(modern1_chipper.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=268.0,
    width=20.0,
    height=20.0
)

# Fungsi enkripsi
def encrypt_aes(plaintext, key, iv):
    """
        Menerima plaintext dan mengembalikan ciphertext yang telah di-enkripsi dalam format Base64.

        Args:
            plaintext (str): Teks biasa yang ingin dienkripsi.
            key (bytes): Kunci enkripsi (harus dalam bentuk bytes).
            iv (bytes): Initialization Vector (IV) yang harus sesuai dengan ukuran blok AES (16 byte).

        Returns:
            str: Ciphertext hasil enkripsi yang di-encode ke Base64.
    """

    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    # Buat encryptor
    encryptor = cipher.encryptor()
    # Enkripsi plaintext
    ciphertext = encryptor.update(plaintext.encode('utf-8')) + encryptor.finalize()
    # Encode ciphertext ke Base64 agar mudah disimpan dan ditransfer
    return base64.b64encode(ciphertext).decode('utf-8')

# Fungsi dekripsi
def decrypt_aes(ciphertext, key, iv):
    try:
        ciphertext = base64.b64decode(ciphertext)
    except binascii.Error:
        return ""
    # Buat cipher AES dengan mode CFB
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    # Buat decryptor
    decryptor = cipher.decryptor()
    # Dekripsi ciphertext menjadi plaintext bytes
    plaintext_bytes = decryptor.update(ciphertext) + decryptor.finalize()

    return plaintext_bytes.decode('utf-8')

# kunci digenerate secara random
modern1_key = os.urandom(32)
modern1_iv = os.urandom(16)
# modern1_kunci.insert(0, base64.b64encode(modern1_key).decode('utf-8'))
# modern1_kunci2.insert(0, base64.b64encode(modern1_iv).decode('utf-8'))
def modern1_key_release(event):
    if ( len(modern1_kunci.get()) == 16 or len(modern1_kunci.get()) == 24 or len(modern1_kunci.get()) == 32 ) and (len(modern1_kunci2.get()) == 16):
        modern1_chipper.delete(0, tk.END)
        modern1_chipper.insert(0, encrypt_aes(modern1_plaintext.get(), modern1_kunci.get().encode(), modern1_kunci2.get().encode()))

def modern1_key_release2(event):
    if (len(modern1_kunci.get()) == 16 or len(modern1_kunci.get()) == 24 or len(modern1_kunci.get()) == 32) and (len(modern1_kunci2.get()) == 16):
        modern1_plaintext.delete(0, tk.END)
        modern1_plaintext.insert(0, decrypt_aes(modern1_chipper.get(), modern1_kunci.get().encode(), modern1_kunci2.get().encode()))


modern1_plaintext.bind("<KeyRelease>", modern1_key_release)
modern1_chipper.bind("<KeyRelease>", modern1_key_release2)


# ===================================================================================================
# ===================================== BLOWFISH ====================================================
frame_modern2 = FrameWindow(
    window,
    height=420,
    width=520,
    bd=0,
    bg="#FFFFFF"
)
# frame_modern2.place(
#     x=286,
#     y=130,
# )
label = tk.Label(
    frame_modern2,
    text="Kriptografi Modern 1 : Blowfish",
    font=("Roboto Bold", 12),
    fg="#121212",
    anchor="nw",
    bg="white"
)
label.place(x=0, y=0, anchor="nw")

# ============================================== kunci 1
tk.Label(
    frame_modern2,
    text="Masukkan kunci (8-56 byte)",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=33)
tk.Label(
    frame_modern2,
    image=textfield_medium,
    bg="white"
).place(x=0, y=56)
modern2_kunci = tk.Entry(
    frame_modern2,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0,
    # state="disabled"
)
modern2_kunci.place(
    x=15.0,
    y=59.0,
    width=430.0,
    height=32.0
)
# ================================ kunci vi ke2
tk.Label(
    frame_modern2,
    text="Initialization Vector (IV)",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=100)
tk.Label(
    frame_modern2,
    image=textfield_medium,
    bg="white"
).place(x=0, y=125)
modern2_kunci2 = tk.Entry(
    frame_modern2,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0,
    # state="disabled"
)
modern2_kunci2.place(
    x=15.0,
    y=128.0,
    width=430.0,
    height=32.0
)
# ======================== plaintext
tk.Label(
    frame_modern2,
    text="Masukan string plaintext",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=167)
tk.Label(
    frame_modern2,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=192)
modern2_plaintext = PlaceholderEntry(
    frame_modern2,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716"
)
modern2_plaintext.place(
    x=15.0,
    y=195.0,
    width=430.0,
    height=32.0
)

# ================================ chipper klasik1
tk.Label(
    frame_modern2,
    text="Masukan string chipperText untuk mencari plainText",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=234)
tk.Label(
    frame_modern2,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=259)
modern2_chipper = PlaceholderEntry(
    frame_modern2,
    placeholder="",
    bg="#FFFFFF",
    fg="#000716",
)
modern2_chipper.place(
    x=15.0,
    y=262.0,
    width=430.0,
    height=32.0
)
# ============= btn copy ============
Button(
    frame_modern2,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(modern2_plaintext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=201.0,
    width=20.0,
    height=20.0
)
Button(
    frame_modern2,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(modern2_chipper.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=268.0,
    width=20.0,
    height=20.0
)

"""
Blowfish adalah algoritma kriptografi simetris yang dirancang oleh Bruce Schneier pada tahun 1993. 
Ini digunakan untuk mengenkripsi data dengan kunci variabel yang panjangnya antara 32 hingga 448 bit atau 8 - 56byte. 
Blowfish terkenal karena kecepatannya, efisiensi, dan keamanan, serta kemampuannya untuk menggantikan 
algoritma yang lebih tua seperti DES."""

def enkripsi_blowfish(teks_asli, kunci):
  """Fungsi untuk mengenkripsi teks menggunakan algoritma Blowfish."""

  cipher = Blowfish.new(kunci, Blowfish.MODE_CBC)
  iv = cipher.iv
  teks_terenkripsi = cipher.encrypt(pad(teks_asli.encode(), Blowfish.block_size))
  return iv + teks_terenkripsi

def dekripsi_blowfish(teks_terenkripsi, kunci):
    """Fungsi untuk mendekripsi teks terenkripsi menggunakan algoritma Blowfish."""
    iv = teks_terenkripsi[:Blowfish.block_size]
    teks_terenkripsi = teks_terenkripsi[Blowfish.block_size:]
    cipher = Blowfish.new(kunci, Blowfish.MODE_CBC, iv)
    teks_asli = unpad(cipher.decrypt(teks_terenkripsi), Blowfish.block_size).decode()
    print(teks_asli)
    return teks_asli

def modern2_key_release(event):
    if len(modern2_kunci.get()) >= 8:
        print(modern2_plaintext.get())
        print(modern1_kunci.get().encode())
        modern2_chipper.delete(0, tk.END)
        modern2_chipper.insert(0, enkripsi_blowfish(modern2_plaintext.get(), modern2_kunci.get().encode()).hex())

def modern2_key_release2(event):
    if len(modern2_kunci.get()) >= 8:
        print("dari chipper : ", modern2_chipper.get())
        print(modern1_kunci.get().encode())
        modern2_plaintext.delete(0, tk.END)
        modern2_plaintext.insert(0, dekripsi_blowfish(bytes.fromhex(modern2_chipper.get()), modern2_kunci.get().encode()))

# b'5CPt11aF4/bCPMznVet0fZOkWBL8zJjDJOYK6EDLKG0='
# ee0652841d3ed5d7ec8bba19dee1d262
modern2_plaintext.bind("<KeyRelease>", modern2_key_release)
modern2_chipper.bind("<KeyRelease>", modern2_key_release2)


# ===================================================================================================
# ====================== FRAME SUPER ================================================================
frame_super = FrameWindow(
    window,
    height=420,
    width=520,
    bd=0,
    bg="#FFFFFF"
)
# frame_super.place(
#     x=286,
#     y=130,
# )
label = tk.Label(
    frame_super,
    text="Super Enkripsi",  # Teks yang ingin ditampilkan
    font=("Roboto Bold", 16),   # Font yang digunakan
    fg="#121212",               # Warna teks (foreground)
    bg="white"              # Warna latar belakang Label agar sama dengan Frame
)
label.place(x=0, y=0, anchor="nw")
# =========================================== kunci 1 chipper
tk.Label(
    frame_super,
    text="Masukan key nomor caesar chipper",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=33)
tk.Label(
    frame_super,
    image=entry_image_2,
    bg="white"
).place(x=0, y=56)
super_key_chipper = EntryNumber(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    placeholder=""
)
super_key_chipper.place(
    x=15.0,
    y=59.0,
    width=214.0,
    height=32.0
)
# =========================================== kunci 2 vigenere
tk.Label(
    frame_super,
    text="Masukan key vigenere chipper",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=265, y=33)
tk.Label(
    frame_super,
    image=entry_image_2,
    bg="white"
).place(x=265, y=56)
super_key_vigenere = Entry(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0
)
super_key_vigenere.place(
    x=280.0,
    y=59.0,
    width=211.0,
    height=32.0
)
# =========================================== kunci 3 AES
tk.Label(
    frame_super,
    text="Masukan key AES (16 / 24 / 32) bytes",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=99)
tk.Label(
    frame_super,
    image=entry_image_2,
    bg="white"
).place(x=0, y=124)
super_key_aes = Entry(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0
)
super_key_aes.place(
    x=15.0,
    y=127.0,
    width=211.0,
    height=32.0
)
# =========================================== kunci 4 Blowfish
tk.Label(
    frame_super,
    text="Masukan key blowfish (8 - 56) bytes",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=265, y=99)
tk.Label(
    frame_super,
    image=entry_image_2,
    bg="white"
).place(x=265, y=124)
super_key_blowfish = Entry(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0
)
super_key_blowfish.place(
    x=280.0,
    y=127.0,
    width=211.0,
    height=32.0
)

# ============================ entry plaintext
tk.Label(
    frame_super,
    text="Masukan plaintext yang akan dienkripsi",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=200)
tk.Label(
    frame_super,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=225)
super_plaintext = Entry(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0
)
super_plaintext.place(
    x=15.0,
    y=228.0,
    width=436.0,
    height=32.0
)
# =========================================== text chipper
tk.Label(
    frame_super,
    text="Hasil chipper | Masukan chipper text untuk mendekripsikannya",
    font=("Roboto Regular", 10),
    fg="#121212",
    bg="white"
).place(x=0, y=312)
tk.Label(
    frame_super,
    image=textfield_medium,
    bg="white"
).place(x=-1, y=337)
super_chippertext = Entry(
    frame_super,
    bg="#FFFFFF",
    fg="#000716",
    bd=0,
    highlightthickness=0
)
super_chippertext.place(
    x=15.0,
    y=340.0,
    width=436.0,
    height=32.0
)


# ========================================= btn Enkripsi
# tombol2
def super_enkripsi_now():
    if (len(super_key_aes.get()) == 16 or len(super_key_aes.get()) == 24 or len(super_key_aes.get()) == 32) and (
            len(super_key_chipper.get()) > 0) and (len(super_key_vigenere.get()) > 0) and (
            len(super_key_blowfish.get()) >= 8):
        text = super_plaintext.get()
        caesar = caesar_cipher(text, int(super_key_chipper.get()))
        vigenere = vigenere_encrypt(caesar, super_key_vigenere.get())
        aes_mase = encrypt_aes(vigenere, key=super_key_aes.get().encode(), iv="okokokokokokokok".encode())
        blowfish_mase = enkripsi_blowfish(aes_mase, super_key_blowfish.get().encode()).hex()
        super_chippertext.delete(0, tk.END)
        super_chippertext.insert(0, blowfish_mase)

def super_dekripsi_now():
    if (len(super_key_aes.get()) == 16 or len(super_key_aes.get()) == 24 or len(super_key_aes.get()) == 32) and (
            len(super_key_chipper.get()) > 0) and (len(super_key_vigenere.get()) > 0) and (
            len(super_key_blowfish.get()) >= 8):
        text = super_chippertext.get()
        blowfish_dekrip = dekripsi_blowfish(bytes.fromhex(text), super_key_blowfish.get().encode())
        aes_dekrip = decrypt_aes(blowfish_dekrip, key=super_key_aes.get().encode(), iv="okokokokokokokok".encode())
        vigenere_dekrip = vigenere_decrypt(aes_dekrip, super_key_vigenere.get())
        caesar_dekrip = caesar_cipher(vigenere_dekrip, -int(super_key_chipper.get()))
        super_plaintext.delete(0, tk.END)
        super_plaintext.insert(0, caesar_dekrip)

Button(
    frame_super,
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: super_enkripsi_now(),
    relief="flat",
    bg="white"
).place(
    x=150.0,
    y=270.0,
    width=102.0,
    height=33.0
)
# ========================================= btn Dekripsi
Button(
    frame_super,
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: super_dekripsi_now(),
    relief="flat",
    bg="white"
).place(
    x=260.0,
    y=270.0,
    width=102.0,
    height=33.0
)
# ============= btn copy ============
Button(
    frame_super,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(super_plaintext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=235.0,
    width=20.0,
    height=20.0
)
Button(
    frame_super,
    image=btn_copy,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        pyperclip.copy(super_chippertext.get())
    ],
    relief="flat",
    bg="white"
).place(
    x=472.0,
    y=347.0,
    width=20.0,
    height=20.0
)
# ==============================================================================================================================
# ==============================================================================================================================
# tombol navbar
rectangle = FrameWindow(
    window,
    bg="#033767",
    width=54,
    height=3
)
rectangle.place(
    x=308.0,
    y=112.0
)
# ======================= bt klasik 1
btnKlasik1 = Button(
    image=button_klasik1_biru,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        rectangle.place(
            x=308.0,
            y=112.0
        ),
        rectangle.config(width=55),
        btnKlasik1.config(image=button_klasik1_biru),
        btnKlasik2.config(image=button_klasik2_orange),
        btnModern1.config(image=button_modern1_orange),
        btnModern2.config(image=button_modern2_orange),
        btnSuper.config(image=button_super_orange),

        frame_klasik1.place(
            x=286,
            y=130,
        ),
        frame_klasik2.place_forget(),
        frame_modern1.place_forget(),
        frame_modern2.place_forget(),
        frame_super.place_forget()

    ],
    relief="flat",
    bg="white"
)
btnKlasik1.place(
    x=295.0,
    y=75.0,
    width=83.0,
    height=34.0
)
# =========================btn klasik 2
btnKlasik2 = Button(
    image=button_klasik2_orange,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        rectangle.place(
            x=397.0,
            y=112.0
        ),
        rectangle.config(width=57),
        btnKlasik1.config(image=button_klasik1_orange),
        btnKlasik2.config(image=button_klasik2_biru),
        btnModern1.config(image=button_modern1_orange),
        btnModern2.config(image=button_modern2_orange),
        btnSuper.config(image=button_super_orange),

        frame_klasik2.place(
            x=286,
            y=130,
        ),
        frame_klasik1.place_forget(),
        frame_modern1.place_forget(),
        frame_modern2.place_forget(),
        frame_super.place_forget()
    ],
    relief="flat",
    bg="white"
)
btnKlasik2.place(
    x=385.0,
    y=75.0,
    width=83.0,
    height=34.0
)

# ====================== btn modern 1
btnModern1 = Button(
    image=button_modern1_orange,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        rectangle.place(
            x=487.0,
            y=112.0
        ),
        rectangle.config(width=61),
        btnKlasik1.config(image=button_klasik1_orange),
        btnKlasik2.config(image=button_klasik2_orange),
        btnModern1.config(image=button_modern1_biru),
        btnModern2.config(image=button_modern2_orange),
        btnSuper.config(image=button_super_orange),

        frame_modern1.place(
            x=286,
            y=130,
        ),
        frame_klasik1.place_forget(),
        frame_klasik2.place_forget(),
        frame_modern2.place_forget(),
        frame_super.place_forget()
    ],
    relief="flat",
    bg="white"
)
btnModern1.place(
    x=475.0,
    y=75.0,
    width=88.0,
    height=34.0
)
# ================================== btn modern 2
btnModern2 = Button(
    image=button_modern2_orange,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        rectangle.place(
            x=582.0,
            y=112.0
        ),
        rectangle.config(width=61),
        btnKlasik1.config(image=button_klasik1_orange),
        btnKlasik2.config(image=button_klasik2_orange),
        btnModern1.config(image=button_modern1_orange),
        btnModern2.config(image=button_modern2_biru),
        btnSuper.config(image=button_super_orange),

        frame_modern2.place(
            x=286,
            y=130,
        ),
        frame_klasik1.place_forget(),
        frame_klasik2.place_forget(),
        frame_modern1.place_forget(),
        frame_super.place_forget()
    ],
    relief="flat",
    bg="white"
)
btnModern2.place(
    x=570.0,
    y=75.0,
    width=88.0,
    height=34.0
)

# ====================== btn super
btnSuper = Button(
    image=button_super_orange,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: [
        rectangle.place(
            x=675.0,
            y=112.0
        ),
        rectangle.config(width=50),
        btnKlasik1.config(image=button_klasik1_orange),
        btnKlasik2.config(image=button_klasik2_orange),
        btnModern1.config(image=button_modern1_orange),
        btnModern2.config(image=button_modern2_orange),
        btnSuper.config(image=button_super_biru),

        frame_super.place(
            x=286,
            y=130,
        ),
        frame_klasik1.place_forget(),
        frame_klasik2.place_forget(),
        frame_modern1.place_forget(),
        frame_modern2.place_forget()
    ],
    relief="flat",
    bg="white"
)
btnSuper.place(
    x=660.0,
    y=75.0,
    width=81.0,
    height=34.0
)



window.resizable(True, True)
window.mainloop()
